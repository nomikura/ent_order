// Code generated by ent, DO NOT EDIT.

package user

import (
	"entdemo/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// University applies equality check predicate on the "university" field. It's identical to UniversityEQ.
func University(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUniversity, v))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOrganizationID, v))
}

// UniversityEQ applies the EQ predicate on the "university" field.
func UniversityEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUniversity, v))
}

// UniversityNEQ applies the NEQ predicate on the "university" field.
func UniversityNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUniversity, v))
}

// UniversityIn applies the In predicate on the "university" field.
func UniversityIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUniversity, vs...))
}

// UniversityNotIn applies the NotIn predicate on the "university" field.
func UniversityNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUniversity, vs...))
}

// UniversityGT applies the GT predicate on the "university" field.
func UniversityGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUniversity, v))
}

// UniversityGTE applies the GTE predicate on the "university" field.
func UniversityGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUniversity, v))
}

// UniversityLT applies the LT predicate on the "university" field.
func UniversityLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUniversity, v))
}

// UniversityLTE applies the LTE predicate on the "university" field.
func UniversityLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUniversity, v))
}

// UniversityContains applies the Contains predicate on the "university" field.
func UniversityContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUniversity, v))
}

// UniversityHasPrefix applies the HasPrefix predicate on the "university" field.
func UniversityHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUniversity, v))
}

// UniversityHasSuffix applies the HasSuffix predicate on the "university" field.
func UniversityHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUniversity, v))
}

// UniversityEqualFold applies the EqualFold predicate on the "university" field.
func UniversityEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUniversity, v))
}

// UniversityContainsFold applies the ContainsFold predicate on the "university" field.
func UniversityContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUniversity, v))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// OrganizationIDIsNil applies the IsNil predicate on the "organization_id" field.
func OrganizationIDIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldOrganizationID))
}

// OrganizationIDNotNil applies the NotNil predicate on the "organization_id" field.
func OrganizationIDNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldOrganizationID))
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
